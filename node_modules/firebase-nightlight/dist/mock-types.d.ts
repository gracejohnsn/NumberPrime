import { EventEmitter2 } from "eventemitter2";
export declare type MockPrimitive = boolean | number | string;
export declare type MockComposite = {
    [key: string]: MockPrimitive | MockComposite;
};
export declare type MockValue = MockPrimitive | MockComposite;
export interface MockEmitters {
    shared: {
        [key: string]: EventEmitter2;
    };
    root: EventEmitter2;
}
export interface MockIdentity {
    credential?: any;
    email: string;
    password?: string;
    token?: string;
    uid?: string;
}
export interface MockQuery {
    endAt?: MockPrimitive | null;
    equalTo?: MockPrimitive | null;
    key?: string;
    limitToFirst?: number;
    limitToLast?: number;
    orderByChild?: string;
    orderByKey?: boolean;
    orderByPriority?: boolean;
    orderByValue?: boolean;
    startAt?: MockPrimitive | null;
}
export interface MockRefStats {
    listeners: {
        child_added: number;
        child_changed: number;
        child_moved: number;
        child_removed: number;
        total: number;
        value: number;
    };
}
export interface MockRefInternals {
    readonly content_: MockValue | null;
    readonly jsonPath_: string;
    readonly queried_: boolean;
    readonly query_: MockQuery;
    stats_(): MockRefStats;
}
