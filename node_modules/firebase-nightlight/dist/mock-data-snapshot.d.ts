import { firebase } from "./firebase";
import { MockValue } from "./mock-types";
export interface MockPair {
    key: string;
    value: MockValue;
}
export interface MockDataSnapshotOptions {
    content?: MockValue | null;
    previousContent?: MockValue | null;
    ref: firebase.database.Reference;
    snapshot?: MockDataSnapshot;
}
export declare class MockDataSnapshot implements firebase.database.DataSnapshot {
    private content_;
    private previousContent_;
    private ref_;
    private refInternals_;
    static pairKeyComparer(a: MockPair, b: MockPair): number;
    static pairKeyEquator(a: MockPair, b: MockPair): boolean;
    static valueComparer(a: any, b: any): number;
    constructor(options: MockDataSnapshotOptions);
    readonly key: string | null;
    readonly ref: firebase.database.Reference;
    child(path: string): firebase.database.DataSnapshot;
    exists(): boolean;
    exportVal(): any;
    forEach(action: (snapshot: firebase.database.DataSnapshot) => boolean): boolean;
    getPriority(): string | number | null;
    hasChild(path: string): boolean;
    hasChildren(): boolean;
    numChildren(): number;
    pairs_(): MockPair[];
    toJSON(): Object | null;
    val(): MockValue | null;
    private val_();
}
