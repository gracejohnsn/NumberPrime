import { firebase } from "./firebase";
import { MockIdentity } from "./mock-types";
export interface MockAuthOptions {
    app: firebase.app.App;
    identities: MockIdentity[];
}
export declare class MockAuth implements firebase.auth.Auth {
    private app_;
    private currentUser_;
    private emitter_;
    private identities_;
    constructor(options: MockAuthOptions);
    readonly app: firebase.app.App;
    readonly currentUser: firebase.User | null;
    readonly languageCode: string | null;
    applyActionCode(code: string): Promise<any>;
    checkActionCode(code: string): Promise<any>;
    confirmPasswordReset(code: string, password: string): Promise<any>;
    createCustomToken(uid: string, developerClaims?: Object): Promise<string>;
    createUser(properties: firebase.auth.CreateRequest): Promise<firebase.auth.UserRecord>;
    createUserWithEmailAndPassword(email: string, password: string): Promise<any>;
    deleteUser(uid: string): Promise<void>;
    fetchProvidersForEmail(email: string): Promise<any>;
    getRedirectResult(): Promise<any>;
    getUser(uid: string): Promise<firebase.auth.UserRecord>;
    getUserByEmail(email: string): Promise<firebase.auth.UserRecord>;
    getUserByPhoneNumber(phoneNumber: string): Promise<firebase.auth.UserRecord>;
    listUsers(maxResults?: number, pageToken?: string): Promise<firebase.auth.ListUsersResult>;
    onAuthStateChanged(nextOrObserver: Object, errorCallback?: (error: firebase.auth.Error) => any, completedCallback?: () => any): () => any;
    onIdTokenChanged(nextOrObserver: Object, error?: (error: firebase.auth.Error) => any, completed?: () => any): () => any;
    sendPasswordResetEmail(email: string): Promise<any>;
    setCustomUserClaims(uid: string, customUserClaims: Object): Promise<void>;
    setPersistence(persistence: firebase.auth.Auth.Persistence): Promise<any>;
    signInAndRetrieveDataWithCredential(credential: firebase.auth.AuthCredential): Promise<any>;
    signInAnonymously(): Promise<any>;
    signInWithCredential(credential: firebase.auth.AuthCredential): Promise<any>;
    signInWithCustomToken(token: string): Promise<any>;
    signInWithEmailAndPassword(email: string, password: string): Promise<any>;
    signInWithPhoneNumber(phoneNumber: string, applicationVerifier: firebase.auth.ApplicationVerifier): Promise<any>;
    signInWithPopup(provider: firebase.auth.AuthProvider): Promise<any>;
    signInWithRedirect(provider: firebase.auth.AuthProvider): Promise<any>;
    signOut(): Promise<any>;
    updateUser(uid: string, properties: firebase.auth.UpdateRequest): Promise<firebase.auth.UserRecord>;
    useDeviceLanguage(): any;
    verifyIdToken(idToken: string): Promise<firebase.auth.DecodedIdToken>;
    verifyPasswordResetCode(code: string): Promise<any>;
}
