import { firebase } from "./firebase";
export interface MockMessagingOptions {
    app: firebase.app.App;
}
export declare class MockMessaging implements firebase.messaging.Messaging {
    private app_;
    constructor(options: MockMessagingOptions);
    readonly app: firebase.app.App;
    deleteToken(token: string): Promise<any> | null;
    getToken(): Promise<any> | null;
    onMessage(nextOrObserver: Object): () => any;
    onTokenRefresh(nextOrObserver: Object): () => any;
    requestPermission(): Promise<any> | null;
    sendToDevice(registrationToken: string | string[], payload: firebase.messaging.MessagingPayload, options?: firebase.messaging.MessagingOptions): Promise<firebase.messaging.MessagingDevicesResponse>;
    sendToDeviceGroup(notificationKey: string, payload: firebase.messaging.MessagingPayload, options?: firebase.messaging.MessagingOptions): Promise<firebase.messaging.MessagingDeviceGroupResponse>;
    sendToTopic(topic: string, payload: firebase.messaging.MessagingPayload, options?: firebase.messaging.MessagingOptions): Promise<firebase.messaging.MessagingTopicResponse>;
    sendToCondition(condition: string, payload: firebase.messaging.MessagingPayload, options?: firebase.messaging.MessagingOptions): Promise<firebase.messaging.MessagingConditionResponse>;
    setBackgroundMessageHandler(callback: (a: Object) => any): any;
    subscribeToTopic(registrationToken: string, topic: string): Promise<firebase.messaging.MessagingTopicManagementResponse>;
    subscribeToTopic(registrationTokens: string[], topic: string): Promise<firebase.messaging.MessagingTopicManagementResponse>;
    unsubscribeFromTopic(registrationToken: string, topic: string): Promise<firebase.messaging.MessagingTopicManagementResponse>;
    unsubscribeFromTopic(registrationTokens: string[], topic: string): Promise<firebase.messaging.MessagingTopicManagementResponse>;
    useServiceWorker(registration: any): any;
}
