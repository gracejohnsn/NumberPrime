"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var json = require("./json");
var lodash = require("./lodash");
var mock_error_1 = require("./mock-error");
var MockDataSnapshot = (function () {
    function MockDataSnapshot(options) {
        this.ref_ = options.ref;
        this.refInternals_ = options.ref;
        if (options.snapshot) {
            this.content_ = options.snapshot.content_;
            this.previousContent_ = null;
        }
        else {
            this.content_ = options.content || this.refInternals_.content_;
            this.previousContent_ = options.previousContent || null;
        }
    }
    MockDataSnapshot.pairKeyComparer = function (a, b) {
        return (a.key < b.key) ? -1 : (a.key > b.key) ? 1 : 0;
    };
    MockDataSnapshot.pairKeyEquator = function (a, b) {
        return a.key === b.key;
    };
    MockDataSnapshot.valueComparer = function (a, b) {
        if (a === null) {
            return (b === null) ? 0 : -1;
        }
        if (b === null) {
            return 1;
        }
        return (a < b) ? -1 : (a > b) ? 1 : 0;
    };
    Object.defineProperty(MockDataSnapshot.prototype, "key", {
        get: function () {
            return this.ref_.key;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MockDataSnapshot.prototype, "ref", {
        get: function () {
            return this.ref_;
        },
        enumerable: true,
        configurable: true
    });
    MockDataSnapshot.prototype.child = function (path) {
        var nonQueryRef = this.ref_.ref;
        var childRef = nonQueryRef.child(path);
        return new MockDataSnapshot({
            content: this.content_,
            ref: childRef
        });
    };
    MockDataSnapshot.prototype.exists = function () {
        return json.has(this.content_, this.refInternals_.jsonPath_);
    };
    MockDataSnapshot.prototype.exportVal = function () {
        throw mock_error_1.unsupported_();
    };
    MockDataSnapshot.prototype.forEach = function (action) {
        var _this = this;
        var cancelled = false;
        lodash.each(this.pairs_(), function (pair) {
            if (action(_this.child(pair.key))) {
                cancelled = true;
                return false;
            }
            return undefined;
        });
        return cancelled;
    };
    MockDataSnapshot.prototype.getPriority = function () {
        throw mock_error_1.unsupported_();
    };
    MockDataSnapshot.prototype.hasChild = function (path) {
        return json.has(this.content_, json.join(this.refInternals_.jsonPath_, path));
    };
    MockDataSnapshot.prototype.hasChildren = function () {
        return this.numChildren() > 0;
    };
    MockDataSnapshot.prototype.numChildren = function () {
        var value = this.val();
        return lodash.isObject(value) ? Object.keys(value).length : 0;
    };
    MockDataSnapshot.prototype.pairs_ = function () {
        var pairs = lodash.map(this.val_(), toPair);
        var query = this.refInternals_.query_;
        if (query.orderByChild) {
            pairs.sort(pairChildComparer(query.orderByChild));
            pairs = lodash.filter(pairs, pairChildPredicate(query.orderByChild, query));
        }
        else if (query.orderByPriority) {
            throw mock_error_1.unsupported_();
        }
        else if (query.orderByValue) {
            pairs.sort(pairValueComparer);
            pairs = lodash.filter(pairs, pairValuePredicate(query));
        }
        else {
            pairs.sort(MockDataSnapshot.pairKeyComparer);
            pairs = lodash.filter(pairs, pairKeyPredicate(query));
        }
        if (query.limitToFirst && (pairs.length > query.limitToFirst)) {
            pairs.splice(query.limitToFirst, pairs.length - query.limitToFirst);
        }
        if (query.limitToLast && (pairs.length > query.limitToLast)) {
            pairs.splice(0, pairs.length - query.limitToLast);
        }
        return pairs;
    };
    MockDataSnapshot.prototype.toJSON = function () {
        throw mock_error_1.unsupported_();
    };
    MockDataSnapshot.prototype.val = function () {
        var value;
        if (this.refInternals_.queried_) {
            var result_1 = {};
            lodash.each(this.pairs_(), function (pair) { result_1[pair.key] = pair.value; });
            value = result_1;
        }
        else {
            value = this.val_();
        }
        return value;
    };
    MockDataSnapshot.prototype.val_ = function () {
        var value = null;
        var jsonPath = this.refInternals_.jsonPath_;
        if (json.has(this.content_, jsonPath)) {
            value = json.get(this.content_, jsonPath);
            if (value === undefined) {
                value = null;
            }
            value = json.clone(value);
        }
        return value;
    };
    return MockDataSnapshot;
}());
exports.MockDataSnapshot = MockDataSnapshot;
function endAtPredicate(value, key, endAtValue, endAtKey) {
    var comparison = MockDataSnapshot.valueComparer(value, endAtValue);
    if (comparison > 0) {
        return false;
    }
    if ((comparison === 0) && endAtKey && (key > endAtKey)) {
        return false;
    }
    return true;
}
function equalToPredicate(value, key, equalToValue, equalToKey) {
    if (MockDataSnapshot.valueComparer(value, equalToValue) !== 0) {
        return false;
    }
    if (equalToKey && (key !== equalToKey)) {
        return false;
    }
    return true;
}
function pairChildComparer(path) {
    path = json.slash(path);
    return function (a, b) {
        return MockDataSnapshot.valueComparer(toChildValue(a.value, path), toChildValue(b.value, path));
    };
}
function pairChildPredicate(path, query) {
    path = json.slash(path);
    return function (pair) {
        var value = toChildValue(pair.value, path);
        if ((query.equalTo !== undefined) && !equalToPredicate(value, pair.key, query.equalTo, query.key)) {
            return false;
        }
        if ((query.startAt !== undefined) && !startAtPredicate(value, pair.key, query.startAt, query.key)) {
            return false;
        }
        if ((query.endAt !== undefined) && !endAtPredicate(value, pair.key, query.endAt, query.key)) {
            return false;
        }
        return true;
    };
}
function pairKeyPredicate(query) {
    return function (pair) {
        if ((query.equalTo !== undefined) && (pair.key !== query.equalTo)) {
            return false;
        }
        if ((query.startAt !== undefined) && (pair.key < query.startAt)) {
            return false;
        }
        if ((query.endAt !== undefined) && (pair.key > query.endAt)) {
            return false;
        }
        return true;
    };
}
function pairValueComparer(a, b) {
    return MockDataSnapshot.valueComparer(a.value, b.value);
}
function pairValuePredicate(query) {
    return function (pair) {
        if ((query.equalTo !== undefined) && !equalToPredicate(pair.value, pair.key, query.equalTo, query.key)) {
            return false;
        }
        if ((query.startAt !== undefined) && !startAtPredicate(pair.value, pair.key, query.startAt, query.key)) {
            return false;
        }
        if ((query.endAt !== undefined) && !endAtPredicate(pair.value, pair.key, query.endAt, query.key)) {
            return false;
        }
        return true;
    };
}
function startAtPredicate(value, key, startAtValue, startAtKey) {
    var comparison = MockDataSnapshot.valueComparer(value, startAtValue);
    if (comparison < 0) {
        return false;
    }
    if ((comparison === 0) && startAtKey && (key < startAtKey)) {
        return false;
    }
    return true;
}
function toChildValue(value, path) {
    return json.has(value, path) ? json.get(value, path) : null;
}
function toPair(value, key) {
    return { key: key, value: value };
}
