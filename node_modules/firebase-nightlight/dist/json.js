"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var jsonPointer = require("json-pointer");
var lodash = require("./lodash");
function clone(entity) {
    return entity ? JSON.parse(JSON.stringify(entity)) : entity;
}
exports.clone = clone;
function delete_(entity, path) {
    jsonPointer.remove(entity, path);
}
exports.delete_ = delete_;
function get(entity, path) {
    return jsonPointer.get(entity, path);
}
exports.get = get;
function has(entity, path) {
    return jsonPointer.has(entity, path);
}
exports.has = has;
function join() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    var buffer = [];
    args.forEach(function (arg) {
        arg = lodash.trim(arg, "/");
        if (arg) {
            buffer.push(arg);
        }
    });
    return slash(buffer.join("/"));
}
exports.join = join;
function prune(entity, path) {
    while (path.length > 0) {
        if (has(entity, path)) {
            var value = get(entity, path);
            if (value !== null) {
                if (Object.keys(value).length === 0) {
                    jsonPointer.remove(entity, path);
                }
                else {
                    return;
                }
            }
        }
        path = path.substring(0, path.lastIndexOf("/"));
    }
}
exports.prune = prune;
function remove(entity, path) {
    var result;
    if (has(entity, path)) {
        result = lodash.extend({}, entity);
        var iter_1 = result;
        var tokens = jsonPointer.parse(path);
        if (tokens.length > 0) {
            var sentinel_1 = tokens.length - 1;
            tokens.forEach(function (token, index) {
                if (index === sentinel_1) {
                    delete iter_1[token];
                }
                else if (entity === undefined) {
                    iter_1[token] = {};
                    iter_1 = iter_1[token];
                }
                else {
                    iter_1[token] = lodash.extend({}, entity[token]);
                    entity = entity[token];
                    iter_1 = iter_1[token];
                }
            });
        }
    }
    else {
        result = entity;
    }
    return result;
}
exports.remove = remove;
function set(entity, path, value) {
    if (has(entity, path)) {
        var previous = get(entity, path);
        if ((typeof previous !== "object") && (value === previous)) {
            return entity;
        }
    }
    var result = lodash.extend({}, entity);
    var iter = result;
    var tokens = jsonPointer.parse(path);
    if (tokens.length > 0) {
        var sentinel_2 = tokens.length - 1;
        tokens.forEach(function (token, index) {
            if (index === sentinel_2) {
                iter[token] = value;
            }
            else if (entity === undefined) {
                iter[token] = {};
                iter = iter[token];
            }
            else {
                iter[token] = lodash.extend({}, entity[token]);
                entity = entity[token];
                iter = iter[token];
            }
        });
    }
    return result;
}
exports.set = set;
function slash(path) {
    return "/" + lodash.trim(path, "/");
}
exports.slash = slash;
