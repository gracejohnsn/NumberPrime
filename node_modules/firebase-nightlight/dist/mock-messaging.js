"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var mock_error_1 = require("./mock-error");
var MockMessaging = (function () {
    function MockMessaging(options) {
        this.app_ = options.app;
    }
    Object.defineProperty(MockMessaging.prototype, "app", {
        get: function () {
            return this.app_;
        },
        enumerable: true,
        configurable: true
    });
    MockMessaging.prototype.deleteToken = function (token) {
        throw mock_error_1.unsupported_();
    };
    MockMessaging.prototype.getToken = function () {
        throw mock_error_1.unsupported_();
    };
    MockMessaging.prototype.onMessage = function (nextOrObserver) {
        throw mock_error_1.unsupported_();
    };
    MockMessaging.prototype.onTokenRefresh = function (nextOrObserver) {
        throw mock_error_1.unsupported_();
    };
    MockMessaging.prototype.requestPermission = function () {
        throw mock_error_1.unsupported_();
    };
    MockMessaging.prototype.sendToDevice = function (registrationToken, payload, options) {
        throw mock_error_1.unsupported_();
    };
    MockMessaging.prototype.sendToDeviceGroup = function (notificationKey, payload, options) {
        throw mock_error_1.unsupported_();
    };
    MockMessaging.prototype.sendToTopic = function (topic, payload, options) {
        throw mock_error_1.unsupported_();
    };
    MockMessaging.prototype.sendToCondition = function (condition, payload, options) {
        throw mock_error_1.unsupported_();
    };
    MockMessaging.prototype.setBackgroundMessageHandler = function (callback) {
        throw mock_error_1.unsupported_();
    };
    MockMessaging.prototype.subscribeToTopic = function (registrationTokens, topic) {
        throw mock_error_1.unsupported_();
    };
    MockMessaging.prototype.unsubscribeFromTopic = function (registrationTokens, topic) {
        throw mock_error_1.unsupported_();
    };
    MockMessaging.prototype.useServiceWorker = function (registration) {
        throw mock_error_1.unsupported_();
    };
    return MockMessaging;
}());
exports.MockMessaging = MockMessaging;
