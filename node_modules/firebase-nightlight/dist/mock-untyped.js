"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var mock_app_1 = require("./mock-app");
var mock_error_1 = require("./mock-error");
var defaultAppName = "[DEFAULT]";
var MockUntyped = (function () {
    function MockUntyped(options) {
        this.apps_ = {};
        this.options_ = options || {};
    }
    Object.defineProperty(MockUntyped.prototype, "apps", {
        get: function () {
            var _this = this;
            return Object.keys(this.apps_).reduce(function (acc, key) {
                acc.push(_this.apps_[key]);
                return acc;
            }, []);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MockUntyped.prototype, "SDK_VERSION", {
        get: function () {
            return "mock";
        },
        enumerable: true,
        configurable: true
    });
    MockUntyped.prototype.app = function (name) {
        var app = this.apps_[name || defaultAppName];
        if (app) {
            return app;
        }
        throw mock_error_1.error_("app/invalid-name", "App not found.");
    };
    MockUntyped.prototype.auth = function (app) {
        return app ? app.auth() : this.app().auth();
    };
    MockUntyped.prototype.database = function (app) {
        return app ? app.database() : this.app().database();
    };
    MockUntyped.prototype.initializeApp = function (options, name) {
        var _this = this;
        var concreteName = name || defaultAppName;
        var app = this.apps_[concreteName];
        if (app) {
            throw mock_error_1.error_("app/name-already-in-use", "App name already exists.");
        }
        var deleter = function () { delete _this.apps_[concreteName]; return Promise.resolve(); };
        var mockApp;
        if (this.options_.apps && this.options_.apps[concreteName]) {
            mockApp = new mock_app_1.MockApp({
                database: this.options_.apps[concreteName].database || { content: {} },
                deleter: deleter,
                identities: this.options_.apps[concreteName].identities || [],
                initializeOptions: options,
                name: concreteName
            });
        }
        else {
            mockApp = new mock_app_1.MockApp({
                database: this.options_.database || { content: {} },
                deleter: deleter,
                identities: this.options_.identities || [],
                initializeOptions: options,
                name: concreteName
            });
        }
        this.apps_[concreteName] = mockApp;
        return mockApp;
    };
    MockUntyped.prototype.messaging = function (app) {
        return app ? app.messaging() : this.app().messaging();
    };
    MockUntyped.prototype.storage = function (app) {
        return app ? app.storage() : this.app().storage();
    };
    return MockUntyped;
}());
exports.MockUntyped = MockUntyped;
