import { firebase } from "./firebase";
import { MockEmitters, MockPrimitive, MockQuery, MockRefInternals, MockRefStats, MockValue } from "./mock-types";
export interface MockRefOptions {
    app: firebase.app.App;
    database: {
        content: MockValue | null;
    };
    emitters: MockEmitters;
    path: string | null;
    promise?: Promise<any>;
    query?: MockQuery;
}
export declare class MockRef implements firebase.database.ThenableReference, MockRefInternals {
    readonly jsonPath_: string;
    readonly query_: MockQuery;
    readonly [Symbol.toStringTag]: "Promise";
    private app_;
    private database_;
    private emitters_;
    private id_;
    private key_;
    private parentPath_;
    private path_;
    private promise_?;
    private queue_;
    private refEmitter_;
    private refEmitterBindings_;
    private rootEmitter_;
    private sharedEmitter_;
    constructor(options: MockRefOptions);
    readonly content_: MockValue | null;
    readonly key: string | null;
    readonly parent: firebase.database.Reference | null;
    readonly path: string;
    readonly queried_: boolean;
    readonly ref: firebase.database.Reference;
    readonly root: firebase.database.Reference;
    catch(rejector?: (error: Error) => any): any;
    child(path: string): firebase.database.Reference;
    endAt(value: MockPrimitive | null, key?: string): firebase.database.Reference;
    equalTo(value: MockPrimitive | null, key?: string): firebase.database.Reference;
    isEqual(other: firebase.database.Query | null): boolean;
    limitToFirst(limit: number): firebase.database.Reference;
    limitToLast(limit: number): firebase.database.Reference;
    off(eventType?: string, callback?: (snapshot: firebase.database.DataSnapshot, prevKey?: string | null) => any, context?: Object | null): any;
    on(eventType: string, successCallback: (snapshot: firebase.database.DataSnapshot, prevKey?: string) => any, errorCallback?: Object | null, context?: Object | null): (snapshot: firebase.database.DataSnapshot, prevKey?: string) => any;
    once(eventType: string, successCallback?: (snapshot: firebase.database.DataSnapshot, prevKey?: string) => any, errorCallback?: Object | null, context?: Object | null): Promise<any>;
    onDisconnect(): firebase.database.OnDisconnect;
    orderByChild(path: string): firebase.database.Reference;
    orderByKey(): firebase.database.Reference;
    orderByPriority(): firebase.database.Reference;
    orderByValue(): firebase.database.Reference;
    push(value?: any, callback?: (error: Error | null) => any): firebase.database.ThenableReference;
    remove(callback?: (error: Error | null) => any): Promise<any>;
    set(value: any, callback?: (error: Error | null) => any): Promise<any>;
    setPriority(priority: string | number | null, callback?: (error: Error | null) => any): Promise<any>;
    setWithPriority(value: MockValue | null, priority: string | number | null, callback?: (error: Error | null) => any): Promise<any>;
    startAt(value: MockPrimitive | null, key?: string): firebase.database.Reference;
    stats_(): MockRefStats;
    then(resolver?: (snapshot: firebase.database.DataSnapshot) => any, rejector?: (error: Error) => any): Promise<any>;
    toJSON(): Object;
    toString(): string;
    transaction(updateCallback: (value: any) => any, completeCallback?: (error: Error | null, committed: boolean, snapshot: firebase.database.DataSnapshot | null) => any, applyLocally?: boolean): Promise<any>;
    update(values: Object, callback?: (error: Error | null) => any): Promise<any>;
    private assertEndAt_();
    private assertEqualTo_();
    private assertLimit_();
    private assertOrder_();
    private assertStartAt_();
    private enqueue_(name, action);
    private sharedListener_(eventType, {snapshot, previousSnapshot});
}
