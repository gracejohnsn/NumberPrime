"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var mock_error_1 = require("./mock-error");
var text_random_string_1 = require("./text-random-string");
var MockUser = (function () {
    function MockUser(options) {
        var alphabet = "ABCDEFGHIJKLMONPQRSTUVWXYZabcdefghijklmonpqrstuvwxyz0123456789";
        var email = options.email || null;
        var uid = options.uid || text_random_string_1.randomString(alphabet, 28);
        this.displayName = email;
        this.email = email;
        this.emailVerified = false;
        this.isAnonymous = false;
        this.metadata = { toJSON: function () { return JSON.stringify(this); } };
        this.phoneNumber = null;
        this.photoURL = null;
        this.providerData = [{
                displayName: email,
                email: email,
                phoneNumber: null,
                photoURL: null,
                providerId: "password",
                uid: uid
            }];
        this.providerId = "password";
        this.refreshToken = "";
        this.uid = uid;
    }
    MockUser.prototype.delete = function () {
        throw mock_error_1.unsupported_();
    };
    MockUser.prototype.getIdToken = function (forceRefresh) {
        throw mock_error_1.unsupported_();
    };
    MockUser.prototype.getToken = function (forceRefresh) {
        throw mock_error_1.unsupported_();
    };
    MockUser.prototype.link = function (credential) {
        throw mock_error_1.unsupported_();
    };
    MockUser.prototype.linkAndRetrieveDataWithCredential = function (credential) {
        throw mock_error_1.unsupported_();
    };
    MockUser.prototype.linkWithCredential = function (credential) {
        throw mock_error_1.unsupported_();
    };
    MockUser.prototype.linkWithPhoneNumber = function (phoneNumber, applicationVerifier) {
        throw mock_error_1.unsupported_();
    };
    MockUser.prototype.linkWithPopup = function (provider) {
        throw mock_error_1.unsupported_();
    };
    MockUser.prototype.linkWithRedirect = function (provider) {
        throw mock_error_1.unsupported_();
    };
    MockUser.prototype.reauthenticate = function (credential) {
        throw mock_error_1.unsupported_();
    };
    MockUser.prototype.reauthenticateAndRetrieveDataWithCredential = function (credential) {
        throw mock_error_1.unsupported_();
    };
    MockUser.prototype.reauthenticateWithCredential = function (credential) {
        throw mock_error_1.unsupported_();
    };
    MockUser.prototype.reauthenticateWithPhoneNumber = function (phoneNumber, applicationVerifier) {
        throw mock_error_1.unsupported_();
    };
    MockUser.prototype.reauthenticateWithPopup = function (provider) {
        throw mock_error_1.unsupported_();
    };
    MockUser.prototype.reauthenticateWithRedirect = function (provider) {
        throw mock_error_1.unsupported_();
    };
    MockUser.prototype.reload = function () {
        throw mock_error_1.unsupported_();
    };
    MockUser.prototype.sendEmailVerification = function () {
        throw mock_error_1.unsupported_();
    };
    MockUser.prototype.toJSON = function () {
        throw mock_error_1.unsupported_();
    };
    MockUser.prototype.unlink = function (providerId) {
        throw mock_error_1.unsupported_();
    };
    MockUser.prototype.updateEmail = function (email) {
        throw mock_error_1.unsupported_();
    };
    MockUser.prototype.updatePassword = function (password) {
        throw mock_error_1.unsupported_();
    };
    MockUser.prototype.updatePhoneNumber = function (phoneCredential) {
        throw mock_error_1.unsupported_();
    };
    MockUser.prototype.updateProfile = function (profile) {
        throw mock_error_1.unsupported_();
    };
    return MockUser;
}());
exports.MockUser = MockUser;
