"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var json = require("./json");
var lodash = require("./lodash");
var eventemitter2_1 = require("eventemitter2");
var mock_auth_1 = require("./mock-auth");
var mock_database_1 = require("./mock-database");
var mock_data_snapshot_1 = require("./mock-data-snapshot");
var mock_error_1 = require("./mock-error");
var mock_messaging_1 = require("./mock-messaging");
var mock_storage_1 = require("./mock-storage");
var MockApp = (function () {
    function MockApp(options) {
        this.deleter_ = options.deleter;
        this.initializeOptions_ = options.initializeOptions;
        this.name_ = options.name;
        this.emitters_ = {
            root: new eventemitter2_1.EventEmitter2({ wildcard: true }),
            shared: {}
        };
        this.emitters_.root.onAny(this.rootListener_.bind(this));
        this.auth_ = new mock_auth_1.MockAuth({
            app: this,
            identities: options.identities
        });
        this.database_ = new mock_database_1.MockDatabase({
            app: this,
            database: options.database,
            emitters: this.emitters_
        });
        this.messaging_ = new mock_messaging_1.MockMessaging({
            app: this
        });
    }
    Object.defineProperty(MockApp.prototype, "name", {
        get: function () {
            return this.name_;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MockApp.prototype, "options", {
        get: function () {
            return this.initializeOptions_;
        },
        enumerable: true,
        configurable: true
    });
    MockApp.prototype.auth = function () {
        return this.auth_;
    };
    MockApp.prototype.database = function () {
        return this.database_;
    };
    MockApp.prototype.delete = function () {
        return this.deleter_();
    };
    MockApp.prototype.firestore = function () {
        throw mock_error_1.unsupported_();
    };
    MockApp.prototype.messaging = function () {
        return this.messaging_;
    };
    MockApp.prototype.storage = function (url) {
        return new mock_storage_1.MockStorage({
            app: this,
            url: url
        });
    };
    MockApp.prototype.rootListener_ = function (eventType, _a) {
        var _this = this;
        var content = _a.content, previousContent = _a.previousContent;
        lodash.each(this.emitters_.shared, function (sharedEmitter, sharedEmitterJsonPath) {
            var sharedEmitterRef = _this.database().ref(lodash.trim(sharedEmitterJsonPath, "/"));
            var value = null;
            if (json.has(content, sharedEmitterJsonPath)) {
                value = json.get(content, sharedEmitterJsonPath);
            }
            var previousValue = null;
            if (json.has(previousContent, sharedEmitterJsonPath)) {
                previousValue = json.get(previousContent, sharedEmitterJsonPath);
            }
            if (value !== previousValue) {
                sharedEmitter.emit("value", {
                    previousSnapshot: null,
                    snapshot: new mock_data_snapshot_1.MockDataSnapshot({
                        content: content,
                        ref: sharedEmitterRef
                    })
                });
            }
            if (value === null) {
                value = {};
            }
            if (previousValue === null) {
                previousValue = {};
            }
            if ((typeof value === "object") && (typeof previousValue === "object")) {
                var childKeys = Object.keys(value);
                var previousChildKeys = Object.keys(previousValue);
                lodash.each(lodash.differenceWith(previousChildKeys, childKeys), function (removedKey) {
                    sharedEmitter.emit("child_removed", {
                        previousSnapshot: new mock_data_snapshot_1.MockDataSnapshot({
                            content: previousContent,
                            ref: sharedEmitterRef.child(removedKey)
                        }),
                        snapshot: new mock_data_snapshot_1.MockDataSnapshot({
                            content: content,
                            ref: sharedEmitterRef.child(removedKey)
                        })
                    });
                });
                lodash.each(lodash.differenceWith(childKeys, previousChildKeys), function (addedKey) {
                    sharedEmitter.emit("child_added", {
                        previousSnapshot: new mock_data_snapshot_1.MockDataSnapshot({
                            content: previousContent,
                            ref: sharedEmitterRef.child(addedKey)
                        }),
                        snapshot: new mock_data_snapshot_1.MockDataSnapshot({
                            content: content,
                            ref: sharedEmitterRef.child(addedKey)
                        })
                    });
                });
                lodash.each(lodash.intersectionWith(previousChildKeys, childKeys), function (changedKey) {
                    if (value[changedKey] !== previousValue[changedKey]) {
                        sharedEmitter.emit("child_changed", {
                            previousSnapshot: new mock_data_snapshot_1.MockDataSnapshot({
                                content: previousContent,
                                ref: sharedEmitterRef.child(changedKey)
                            }),
                            snapshot: new mock_data_snapshot_1.MockDataSnapshot({
                                content: content,
                                ref: sharedEmitterRef.child(changedKey)
                            })
                        });
                    }
                });
            }
        });
    };
    return MockApp;
}());
exports.MockApp = MockApp;
