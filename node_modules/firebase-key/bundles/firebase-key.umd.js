/*MIT license https://github.com/cartant/firebase-key/blob/master/LICENSE*/
(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
	typeof define === 'function' && define.amd ? define(['exports'], factory) :
	(factory((global.firebaseKey = {})));
}(this, (function (exports) { 'use strict';

var alphabet = "-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz";

function milliseconds(key) {
    var result = 0;
    for (var i = 0; i < 8; ++i) {
        var index = alphabet.indexOf(key.charAt(i));
        if (index === -1) {
            throw new Error("Unexpected character '" + key.charAt(i) + "'.");
        }
        result = (result * 64) + index;
    }
    return result;
}

function date(key) {
    return new Date(milliseconds(key));
}

function decode(component) {
    return component.replace(/!([0-9a-f]{2})/gi, function (match, code) { return String.fromCharCode(parseInt(code, 16)); });
}

function decodeLexicographic(key) {
    var value = 0;
    var lengthChar = key.charAt(0);
    if (lengthChar > "_") {
        for (var k = 1; k < key.length; k++) {
            value *= alphabet.length;
            value += alphabet.indexOf(key.charAt(k));
        }
    }
    else {
        for (var k = 1; k < key.length; k++) {
            value *= alphabet.length;
            value += alphabet.length - 1 - alphabet.indexOf(key.charAt(k));
        }
        value = -value;
    }
    return value;
}

function repeat(text, count) {
    var result = "";
    if (typeof text.repeat === "function") {
        result = text.repeat(count);
    }
    else {
        if (count > 0) {
            while (count > 1) {
                if (count & 1) {
                    result += text;
                }
                count >>= 1;
                text += text;
            }
            result = result + text;
        }
    }
    return result;
}

function decrement(key) {
    return key.replace(/[^-]-*$/, function (match) {
        var index = alphabet.indexOf(match.charAt(0));
        if (index === -1) {
            throw new Error("Unexpected character '" + match.charAt(0) + "'.");
        }
        return alphabet.charAt(index - 1) + repeat("z", match.length - 1);
    });
}

function encode(component) {
    return component.replace(/[\/\.\$\[\]#!]/g, function (match) { return "!" + match.charCodeAt(0).toString(16).toUpperCase(); });
}

function encodeLexicographic(value) {
    var result = "";
    if (value === 0) {
        result = "a-";
    }
    else if (value > 0) {
        while (value > 0) {
            var digit = (value % alphabet.length);
            result = alphabet.charAt(digit) + result;
            value -= digit;
            value /= alphabet.length;
        }
        var prefix = alphabet.charAt(result.length + 37);
        result = prefix + result;
    }
    else {
        value = -value;
        while (value > 0) {
            var digit = (value % alphabet.length);
            result = alphabet.charAt(alphabet.length - 1 - digit) + result;
            value -= digit;
            value /= alphabet.length;
        }
        var prefix = alphabet.charAt(37 - result.length);
        result = prefix + result;
    }
    return result;
}

function increment(key) {
    return key.replace(/[^z]z*$/, function (match) {
        var index = alphabet.indexOf(match.charAt(0));
        if (index === -1) {
            throw new Error("Unexpected character '" + match.charAt(0) + "'.");
        }
        return alphabet.charAt(index + 1) + repeat("-", match.length - 1);
    });
}

function randomString(alphabet, length) {
    var buffer = [];
    length = length | 0;
    while (length) {
        var r = (Math.random() * alphabet.length) | 0;
        buffer.push(alphabet.charAt(r));
        length -= 1;
    }
    return buffer.join("");
}

var lastTimestamp = 0;
function key(timestamp, as) {
    if (timestamp === undefined) {
        timestamp = Date.now();
        if (timestamp <= lastTimestamp) {
            timestamp = lastTimestamp + 1;
        }
        lastTimestamp = timestamp;
    }
    if (timestamp instanceof Date) {
        timestamp = timestamp.getTime();
    }
    var result = new Array(9);
    for (var i = 7; i >= 0; --i) {
        result[i] = alphabet.charAt(timestamp % 64);
        timestamp = Math.floor(timestamp / 64);
    }
    if (timestamp !== 0) {
        throw new Error("Unexpected timestamp.");
    }
    switch (as) {
        case "max":
            result[8] = "zzzzzzzzzzzz";
            break;
        case "min":
            result[8] = "------------";
            break;
        default:
            result[8] = randomString(alphabet, 12);
    }
    return result.join("");
}
function resetLastTimestamp() {
    lastTimestamp = 0;
}

exports.date = date;
exports.decode = decode;
exports.decodeLexicographic = decodeLexicographic;
exports.decrement = decrement;
exports.encode = encode;
exports.encodeLexicographic = encodeLexicographic;
exports.increment = increment;
exports.key = key;
exports.resetLastTimestamp = resetLastTimestamp;
exports.milliseconds = milliseconds;

Object.defineProperty(exports, '__esModule', { value: true });

})));
